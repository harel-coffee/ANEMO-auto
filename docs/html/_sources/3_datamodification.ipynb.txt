{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# data_modification"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. _before using the function:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## before using the functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for use these functions, you will need :"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "- to use :mod:`~ANEMO.ANEMO.ANEMO`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ANEMO import ANEMO\n",
    "\n",
    "param_exp = {'N_trials' : 2, 'N_blocks' : 2,\n",
    "             'dir_target' : [[-1, 1], [1, -1]],\n",
    "             'px_per_deg' : 36.51}\n",
    "\n",
    "A = ANEMO(param_exp)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "- to use :func:`~ANEMO.read_edf`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from ANEMO import read_edf\n",
    "\n",
    "datafile = 'name_data_file.asc'\n",
    "data = read_edf(datafile, start='TRIALID')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "- to use :func:`~ANEMO.ANEMO.ANEMO.arg`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "block, trial  = 1, 1\n",
    "trial_data = trial + param_exp['N_trials']*block\n",
    "\n",
    "arg = A.arg(data_trial=data[trial_data], trial=trial, block=block)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height: 0px; width: 100%; border: 1px solid #B1B4B6; margin-left:0\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## data_modification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### filter_data"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.filter_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "filt = A.filter_data(data=arg.data_x, cutoff=30, sample_rate=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### data_deg"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.data_deg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_deg = A.data_deg(data=arg.data_x,\n",
    "                      StimulusOf=arg.StimulusOf,\n",
    "                      t_0=arg.t_0,\n",
    "                      saccades=arg.saccades,\n",
    "                      before_sacc=5,\n",
    "                      after_sacc=15,\n",
    "                      filt=None, cutoff=30, sample_rate=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### velocity_deg"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.velocity_deg"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. _velocity_deg:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "velocity_deg_x = A.velocity_deg(data_x=arg.data_x,\n",
    "                                filt=None, cutoff=30, sample_rate=1000)\n",
    "\n",
    "velocity_deg_y = A.velocity_deg(data_x=arg.data_y,\n",
    "                                filt=None, cutoff=30, sample_rate=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### detec_misac"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.detec_misac"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. _misac:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function\n",
    "\n",
    "- for ``velocity_deg_x`` and ``velocity_deg_y`` see :ref:`here <velocity_deg>`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "misac = A.detec_misac(velocity_x=velocity_deg_x,\n",
    "                      velocity_y=velocity_deg_y,\n",
    "                      t_0=arg.t_0,\n",
    "                      VFAC=5, mindur=5, maxdur=100, minsep=30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### supp_sacc"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.supp_sacc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function\n",
    "\n",
    "- for ``velocity_deg_x`` see :ref:`here <velocity_deg>`\n",
    "- for ``misac`` see :ref:`here <misac>`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_saccades = arg.saccades\n",
    "new_saccades.extend(misac)\n",
    "\n",
    "new_velocity_x = A.supp_sacc(velocity=velocity_deg_x,\n",
    "                             saccades=new_saccades,\n",
    "                             trackertime=arg.trackertime,\n",
    "                             before_sacc=5, after_sacc=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### velocity_NAN"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. autofunction :: ANEMO.ANEMO.ANEMO.velocity_NAN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exemple:**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "see :ref:`here <before using the function>` before using the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "velocity_NAN = A.velocity_NAN(data_x=arg.data_x,\n",
    "                              data_y=arg.data_y,\n",
    "                              saccades=arg.saccades,\n",
    "                              trackertime=arg.trackertime,\n",
    "                              TargetOn=arg.TargetOn,\n",
    "                              before_sacc=5, after_sacc=15,\n",
    "                              stop_search_misac=None,\n",
    "                              filt=None, cutoff=30, sample_rate=1000)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Format de la Cellule Texte Brut",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
